model:
  arch: mini_gpt4 
  model_type: pretrain_vicuna
  freeze_vit: True
  freeze_qformer: True
  max_txt_len: 160
  end_sym: "###"
  prompt_path: "prompts/alignment.txt"
  prompt_template: '###Human: {} ###Assistant: '
  ckpt: '/path/to/stage1/checkpoint/'

# 新增匹配概率预测部分  
matching_clf: 
  arch: linear # 线性层
  in_dim: 1024 # 输入维度 
  out_dim: 1 # 输出1个值表示匹配概率

loss_fn: BinaryCrossEntropy # 使用二分类交叉熵损失

datasets:
  cc_sbu_align:
    vis_processor:
      train:
        name: "blip2_image_train"
        image_size: 224
    text_processor:
      train:  
        name: "blip_caption"
        # 设置标签,1表示匹配,0表示不匹配
        labels: [1, 0, 1, 0, ...] 

run:
  task: image_text_pretrain
  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 3e-5
  min_lr: 1e-5
  warmup_lr: 1e-6

  weight_decay: 0.05
  max_epoch: 5
  iters_per_epoch: 200
  batch_size_train: 12
  batch_size_eval: 12
  num_workers: 4
  warmup_steps: 200

  seed: 42
  output_dir: "output/minigpt4_stage2_finetune"

  amp: True
  resume_ckpt_path: null

  evaluate: False 
  train_splits: ["train"]

  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
  # 评估时的阈值
  matching_threshold: 0.5
  
  ...

  # 模型输出匹配概率
  output_key: matching_prob

  # 训练时的参数
  train_params:
    loss_key: matching_clf # 损失函数作用的输出键

  # 评估的参数
  eval_params:
    accuracy_key: matching_prob # 计算准确率的键名


def compute_loss(model_out, batch):
  # 从模型输出和标签中取出匹配概率预测和目标
  pred_matching_prob = model_out['matching_prob']  
  target = batch['labels']
  
  # 计算二分类交叉熵损失 
  loss = loss_fn(pred_matching_prob, target) 
  
  return loss

def eval_accuracy(model_out, batch):
  # 从输出中取匹配概率预测
  pred_matching_prob = model_out['matching_prob']

  # 根据阈值计算正确预测的数量
  correct = (pred_matching_prob > matching_threshold) == batch['labels']
  
  # 计算准确率
  acc = sum(correct) / len(correct)

  return acc